statement -> labeled-statement
statement -> compound-statement
statement -> selection-statement
statement -> iteration-statement
statement -> jump-statement
labeled-statement -> identifier calculation expression-statement ;
labeled-statement -> identifier + + ;
labeled-statement -> identifier - - ;
calculation ->   =
calculation -> + =
calculation -> - =
calculation -> * =
calculation -> / =
calculation -> % =
expression-statement -> number
expression-statement -> identifier
initialize-statement -> type identifier ;
initialize-statement -> type identifier = experisson-statement ;
type -> int
type -> float
type -> char
compound-statement -> { statement-seq }
statement-seq -> statement temp-statement-seq
temp-statement-seq -> statement temp-statement-seq
temp-statement-seq -> ''
selection-statement -> if ( condition ) statement
selection-statement -> if ( condition ) statement else statement
condition -> expression-statement
condition -> expression-statement comparison expression-statement
comparison -> = =
comparison -> > =
comparison -> < = 
comparison -> ! =
comparison -> >
comparison -> <
iteration-statement -> while ( condition ) statement
iteration-statement -> do statement while ( condition ) ;
iteration-statement -> for ( for-init-statement ; condition ; labled-statement ) statement
for-init-statement -> expression-statement
for-init-statement -> initialize-statement :
jump-statement -> break ;
jump-statement -> continue ;
jump-statement ->  return expression-statement ;